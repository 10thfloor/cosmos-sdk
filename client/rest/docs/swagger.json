{
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/txs": {
            "post": {
                "description": "Broadcast a signed transaction with the broadcasting mode. The\nmode must either be sync, async, or block. The use of block mode\nis not advised. The sync mode will broadcast and wait for a\nCheckTx response, whereas async mode will broadcast and return\nimmediately.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Broadcast a signed transaction",
                "parameters": [
                    {
                        "description": "Signed transaction along with the broadcasting mode",
                        "name": "tx",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.BroadcastReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/types.TxResponse"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid.",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the transaction cannot be decoded.",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "rest.BroadcastReq": {
            "type": "object",
            "properties": {
                "mode": {
                    "type": "string"
                },
                "tx": {
                    "type": "object",
                    "$ref": "#/definitions/types.StdTx"
                }
            }
        },
        "rest.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "types.ABCIMessageLog": {
            "type": "object",
            "properties": {
                "events": {
                    "description": "Events contains a slice of Event objects that were emitted during some\nexecution.",
                    "type": "object",
                    "$ref": "#/definitions/types.StringEvents"
                },
                "log": {
                    "type": "string"
                },
                "msg_index": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "types.ABCIMessageLogs": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "events": {
                        "description": "Events contains a slice of Event objects that were emitted during some\nexecution.",
                        "type": "object",
                        "$ref": "#/definitions/types.StringEvents"
                    },
                    "log": {
                        "type": "string"
                    },
                    "msg_index": {
                        "type": "integer"
                    },
                    "success": {
                        "type": "boolean"
                    }
                }
            }
        },
        "types.Attribute": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "types.StdFee": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "gas": {
                    "type": "integer"
                }
            }
        },
        "types.StdSignature": {
            "type": "object",
            "properties": {
                "signature": {
                    "type": "string",
                    "format": "base64",
                    "example": "U3dhZ2dlciByb2Nrcw=="
                }
            }
        },
        "types.StdTx": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "object",
                    "$ref": "#/definitions/types.StdFee"
                },
                "memo": {
                    "type": "string"
                },
                "msg": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.StdSignature"
                    }
                }
            }
        },
        "types.StringEvent": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Attribute"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "types.StringEvents": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/types.Attribute"
                        }
                    },
                    "type": {
                        "type": "string"
                    }
                }
            }
        },
        "types.Tx": {
            "type": "object"
        },
        "types.TxResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "codespace": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "events": {
                    "description": "DEPRECATED: Remove in the next next major release in favor of using the\nABCIMessageLog.Events field.",
                    "type": "object",
                    "$ref": "#/definitions/types.StringEvents"
                },
                "gas_used": {
                    "type": "integer"
                },
                "gas_wanted": {
                    "type": "integer"
                },
                "height": {
                    "type": "integer"
                },
                "info": {
                    "type": "string"
                },
                "logs": {
                    "type": "object",
                    "$ref": "#/definitions/types.ABCIMessageLogs"
                },
                "raw_log": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "tx": {
                    "type": "object",
                    "$ref": "#/definitions/types.Tx"
                },
                "txhash": {
                    "type": "string"
                }
            }
        }
    }
}