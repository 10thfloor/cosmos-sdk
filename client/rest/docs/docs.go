// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-09-18 10:05:09.781608 -0400 EDT m=+0.358197733

package docs

import (
	"bytes"
	"encoding/json"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/gov/parameters/{type}": {
            "get": {
                "description": "Query either (deposit | tallying | voting) parameters of the governance module.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query governance parameters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of param (deposit | tallying | voting)",
                        "name": "type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ResponseWithHeight"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid height",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Returned if the type of parameter doesn't exist",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals": {
            "get": {
                "description": "Query the list of governance proposals with optional filters for\nproposal status, depositor, and/or voter.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query for the list of governance proposals",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter proposals by proposal status (deposit_period | voting_period | passed | rejected)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter proposals by depositor address",
                        "name": "depositor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter proposals by voter address",
                        "name": "voter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ResponseWithHeight"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid parameters",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Generate a proposal transaction that is ready for signing.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Generate an unsigned proposal transaction",
                "parameters": [
                    {
                        "description": "The data required to construct a proposal message. The proposal_type can be text | parameter_change",
                        "name": "tx",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.PostProposalReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/types.StdTx"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}": {
            "get": {
                "description": "Query an individual governance proposal by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ResponseWithHeight"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposal ID or height",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}/deposits": {
            "get": {
                "description": "Query an individual governance proposal's deposits.\nNOTE: In order to query deposits for passed proposals, the transaction\nrecord must be available otherwise the query will fail. This requires a\nnode that is not pruning transaction history.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal's deposits",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ResponseWithHeight"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposal ID or height",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Generate a deposit transaction that is ready for signing.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Generate an unsigned deposit transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal to deposit to",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The data required to construct a deposit message",
                        "name": "tx",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.DepositReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/types.StdTx"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}/deposits/{depositor}": {
            "get": {
                "description": "Query an individual governance proposal's deposits.\nNOTE: In order to query a deposit for a passed proposal, the transaction\nrecord must be available otherwise the query will fail. This requires a\nnode that is not pruning transaction history.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal's individual deposit",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The address of the depositor",
                        "name": "depositor",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ResponseWithHeight"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposalID or depositor",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Returned if the proposal is not found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}/proposer": {
            "get": {
                "description": "Query an individual governance proposal's proposer.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal's proposer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ResponseWithHeight"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposal ID or height",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}/tally": {
            "get": {
                "description": "Query an individual governance proposal's vote tally.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal's individual tally",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ResponseWithHeight"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposal ID or height",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}/votes": {
            "get": {
                "description": "Query an individual governance proposal's votes.\nNOTE: In order to query deposits for passed proposals, the transaction\nrecord must be available otherwise the query will fail. This requires a\nnode that is not pruning transaction history.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal's votes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ResponseWithHeight"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposal ID or height",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Generate a vote transaction that is ready for signing.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Generate an unsigned vote transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal to vote for",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The data required to construct a vote message",
                        "name": "tx",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.VoteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/types.StdTx"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}/votes/{voter}": {
            "get": {
                "description": "Query an individual governance proposal's vote.\nNOTE: In order to query votes for passed proposals, the transaction\nrecord must be available otherwise the query will fail. This requires a\nnode that is not pruning transaction history.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal's individual vote",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The address of the voter",
                        "name": "voter",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ResponseWithHeight"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposal ID or voter address",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Returned if the proposal is not found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/txs": {
            "post": {
                "description": "Broadcast a signed transaction with the broadcasting mode. The\nmode must either be sync, async, or block. The use of block mode\nis not advised. The sync mode will broadcast and wait for a\nCheckTx response, whereas async mode will broadcast and return\nimmediately.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Broadcast a signed transaction",
                "parameters": [
                    {
                        "description": "Signed transaction along with the broadcasting mode",
                        "name": "tx",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.BroadcastReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/types.TxResponse"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid.",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the transaction cannot be decoded.",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "rest.BaseReq": {
            "type": "object",
            "properties": {
                "account_number": {
                    "type": "integer"
                },
                "chain_id": {
                    "type": "string"
                },
                "fees": {
                    "type": "string"
                },
                "from": {
                    "type": "string"
                },
                "gas": {
                    "type": "string"
                },
                "gas_adjustment": {
                    "type": "string"
                },
                "gas_prices": {
                    "type": "string"
                },
                "memo": {
                    "type": "string"
                },
                "sequence": {
                    "type": "integer"
                },
                "simulate": {
                    "type": "boolean"
                }
            }
        },
        "rest.BroadcastReq": {
            "type": "object",
            "properties": {
                "mode": {
                    "type": "string"
                },
                "tx": {
                    "type": "object",
                    "$ref": "#/definitions/types.StdTx"
                }
            }
        },
        "rest.DepositReq": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Coins to add to the proposal's deposit",
                    "type": "string"
                },
                "base_req": {
                    "type": "object",
                    "$ref": "#/definitions/rest.BaseReq"
                },
                "depositor": {
                    "description": "Address of the depositor",
                    "type": "string"
                }
            }
        },
        "rest.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "rest.PostProposalReq": {
            "type": "object",
            "properties": {
                "base_req": {
                    "type": "object",
                    "$ref": "#/definitions/rest.BaseReq"
                },
                "description": {
                    "description": "Description of the proposal",
                    "type": "string"
                },
                "initial_deposit": {
                    "description": "Coins to add to the proposal's deposit",
                    "type": "string"
                },
                "proposal_type": {
                    "description": "Type of proposal. Initial set {PlainTextProposal, SoftwareUpgradeProposal}",
                    "type": "string"
                },
                "proposer": {
                    "description": "Address of the proposer",
                    "type": "string"
                },
                "title": {
                    "description": "Title of the proposal",
                    "type": "string"
                }
            }
        },
        "rest.ResponseWithHeight": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "string"
                }
            }
        },
        "rest.VoteReq": {
            "type": "object",
            "properties": {
                "base_req": {
                    "type": "object",
                    "$ref": "#/definitions/rest.BaseReq"
                },
                "option": {
                    "description": "option from OptionSet chosen by the voter",
                    "type": "string"
                },
                "voter": {
                    "description": "address of the voter",
                    "type": "string"
                }
            }
        },
        "types.ABCIMessageLog": {
            "type": "object",
            "properties": {
                "events": {
                    "description": "Events contains a slice of Event objects that were emitted during some\nexecution.",
                    "type": "object",
                    "$ref": "#/definitions/types.StringEvents"
                },
                "log": {
                    "type": "string"
                },
                "msg_index": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "types.ABCIMessageLogs": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "events": {
                        "description": "Events contains a slice of Event objects that were emitted during some\nexecution.",
                        "type": "object",
                        "$ref": "#/definitions/types.StringEvents"
                    },
                    "log": {
                        "type": "string"
                    },
                    "msg_index": {
                        "type": "integer"
                    },
                    "success": {
                        "type": "boolean"
                    }
                }
            }
        },
        "types.Attribute": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "types.StdFee": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "gas": {
                    "type": "integer"
                }
            }
        },
        "types.StdSignature": {
            "type": "object",
            "properties": {
                "signature": {
                    "type": "string",
                    "format": "base64",
                    "example": "U3dhZ2dlciByb2Nrcw=="
                }
            }
        },
        "types.StdTx": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "object",
                    "$ref": "#/definitions/types.StdFee"
                },
                "memo": {
                    "type": "string"
                },
                "msg": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.StdSignature"
                    }
                }
            }
        },
        "types.StringEvent": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Attribute"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "types.StringEvents": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/types.Attribute"
                        }
                    },
                    "type": {
                        "type": "string"
                    }
                }
            }
        },
        "types.Tx": {
            "type": "object"
        },
        "types.TxResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "codespace": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "events": {
                    "description": "DEPRECATED: Remove in the next next major release in favor of using the\nABCIMessageLog.Events field.",
                    "type": "object",
                    "$ref": "#/definitions/types.StringEvents"
                },
                "gas_used": {
                    "type": "integer"
                },
                "gas_wanted": {
                    "type": "integer"
                },
                "height": {
                    "type": "integer"
                },
                "info": {
                    "type": "string"
                },
                "logs": {
                    "type": "object",
                    "$ref": "#/definitions/types.ABCIMessageLogs"
                },
                "raw_log": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "tx": {
                    "type": "object",
                    "$ref": "#/definitions/types.Tx"
                },
                "txhash": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{ Schemes: []string{}}

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface {}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
