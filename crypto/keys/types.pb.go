// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crypto/keys/types.proto

package keys

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	github_com_tendermint_tendermint_crypto "github.com/tendermint/tendermint/crypto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Curve defines the key curve types that are available for key generation.
type Curve int32

const (
	// Unspecified curve. Returns error on key generation.
	UNSPECIFIED Curve = 0
	// Ed25519 curve
	ED25519 Curve = 1
	// Secp256k1 curve
	SECP256K1 Curve = 2
	// Sr25519 curve
	SR25519 Curve = 3
)

var Curve_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "ED25519",
	2: "SECP256K1",
	3: "SR25519",
}

var Curve_value = map[string]int32{
	"UNSPECIFIED": 0,
	"ED25519":     1,
	"SECP256K1":   2,
	"SR25519":     3,
}

func (x Curve) String() string {
	return proto.EnumName(Curve_name, int32(x))
}

func (Curve) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{0}
}

// PubKey defines the application-level PubKey type.
type PubKey struct {
	// sum defines a set of all acceptable concrete PubKey implementations.
	//
	// Types that are valid to be assigned to Sum:
	//	*PubKey_Ed25519
	//	*PubKey_Secp256K1
	//	*PubKey_Sr25519
	Sum isPubKey_Sum `protobuf_oneof:"sum"`
}

func (m *PubKey) Reset()      { *m = PubKey{} }
func (*PubKey) ProtoMessage() {}
func (*PubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{0}
}
func (m *PubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKey.Merge(m, src)
}
func (m *PubKey) XXX_Size() int {
	return m.Size()
}
func (m *PubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKey.DiscardUnknown(m)
}

var xxx_messageInfo_PubKey proto.InternalMessageInfo

type isPubKey_Sum interface {
	isPubKey_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PubKey_Ed25519 struct {
	Ed25519 *PubKeyEd25519 `protobuf:"bytes,1,opt,name=ed25519,proto3,oneof" json:"ed25519,omitempty"`
}
type PubKey_Secp256K1 struct {
	Secp256K1 *PubKeySecp256K1 `protobuf:"bytes,2,opt,name=secp256k1,proto3,oneof" json:"secp256k1,omitempty"`
}
type PubKey_Sr25519 struct {
	Sr25519 *PubKeySr25519 `protobuf:"bytes,3,opt,name=sr25519,proto3,oneof" json:"sr25519,omitempty"`
}

func (*PubKey_Ed25519) isPubKey_Sum()   {}
func (*PubKey_Secp256K1) isPubKey_Sum() {}
func (*PubKey_Sr25519) isPubKey_Sum()   {}

func (m *PubKey) GetSum() isPubKey_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *PubKey) GetEd25519() *PubKeyEd25519 {
	if x, ok := m.GetSum().(*PubKey_Ed25519); ok {
		return x.Ed25519
	}
	return nil
}

func (m *PubKey) GetSecp256K1() *PubKeySecp256K1 {
	if x, ok := m.GetSum().(*PubKey_Secp256K1); ok {
		return x.Secp256K1
	}
	return nil
}

func (m *PubKey) GetSr25519() *PubKeySr25519 {
	if x, ok := m.GetSum().(*PubKey_Sr25519); ok {
		return x.Sr25519
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PubKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PubKey_Ed25519)(nil),
		(*PubKey_Secp256K1)(nil),
		(*PubKey_Sr25519)(nil),
	}
}

// PrivKey defines the application-level PrivKey type.
type PrivKey struct {
	// sum defines a set of all acceptable concrete PrivKey implementations.
	//
	// Types that are valid to be assigned to Sum:
	//	*PrivKey_Ed25519
	//	*PrivKey_Secp256K1
	//	*PrivKey_Sr25519
	Sum isPrivKey_Sum `protobuf_oneof:"sum"`
}

func (m *PrivKey) Reset()      { *m = PrivKey{} }
func (*PrivKey) ProtoMessage() {}
func (*PrivKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{1}
}
func (m *PrivKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivKey.Merge(m, src)
}
func (m *PrivKey) XXX_Size() int {
	return m.Size()
}
func (m *PrivKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivKey.DiscardUnknown(m)
}

var xxx_messageInfo_PrivKey proto.InternalMessageInfo

type isPrivKey_Sum interface {
	isPrivKey_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PrivKey_Ed25519 struct {
	Ed25519 *PrivKeyEd25519 `protobuf:"bytes,1,opt,name=ed25519,proto3,oneof" json:"ed25519,omitempty"`
}
type PrivKey_Secp256K1 struct {
	Secp256K1 *PrivKeySecp256K1 `protobuf:"bytes,2,opt,name=secp256k1,proto3,oneof" json:"secp256k1,omitempty"`
}
type PrivKey_Sr25519 struct {
	Sr25519 *PrivKeySr25519 `protobuf:"bytes,3,opt,name=sr25519,proto3,oneof" json:"sr25519,omitempty"`
}

func (*PrivKey_Ed25519) isPrivKey_Sum()   {}
func (*PrivKey_Secp256K1) isPrivKey_Sum() {}
func (*PrivKey_Sr25519) isPrivKey_Sum()   {}

func (m *PrivKey) GetSum() isPrivKey_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *PrivKey) GetEd25519() *PrivKeyEd25519 {
	if x, ok := m.GetSum().(*PrivKey_Ed25519); ok {
		return x.Ed25519
	}
	return nil
}

func (m *PrivKey) GetSecp256K1() *PrivKeySecp256K1 {
	if x, ok := m.GetSum().(*PrivKey_Secp256K1); ok {
		return x.Secp256K1
	}
	return nil
}

func (m *PrivKey) GetSr25519() *PrivKeySr25519 {
	if x, ok := m.GetSum().(*PrivKey_Sr25519); ok {
		return x.Sr25519
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrivKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrivKey_Ed25519)(nil),
		(*PrivKey_Secp256K1)(nil),
		(*PrivKey_Sr25519)(nil),
	}
}

// PubKeyEd25519 implements crypto.PubKey for the Ed25519 signature scheme.
type PubKeyEd25519 struct {
	bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *PubKeyEd25519) Reset()      { *m = PubKeyEd25519{} }
func (*PubKeyEd25519) ProtoMessage() {}
func (*PubKeyEd25519) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{2}
}
func (m *PubKeyEd25519) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeyEd25519) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeyEd25519.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeyEd25519) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeyEd25519.Merge(m, src)
}
func (m *PubKeyEd25519) XXX_Size() int {
	return m.Size()
}
func (m *PubKeyEd25519) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeyEd25519.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeyEd25519 proto.InternalMessageInfo

// PrivKeyEd25519 implements crypto.PrivKey for the Ed25519 signature scheme.
type PrivKeyEd25519 struct {
	bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *PrivKeyEd25519) Reset()      { *m = PrivKeyEd25519{} }
func (*PrivKeyEd25519) ProtoMessage() {}
func (*PrivKeyEd25519) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{3}
}
func (m *PrivKeyEd25519) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivKeyEd25519) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivKeyEd25519.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivKeyEd25519) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivKeyEd25519.Merge(m, src)
}
func (m *PrivKeyEd25519) XXX_Size() int {
	return m.Size()
}
func (m *PrivKeyEd25519) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivKeyEd25519.DiscardUnknown(m)
}

var xxx_messageInfo_PrivKeyEd25519 proto.InternalMessageInfo

// Multisignature is used to represent the signature object used in the multisigs.
// Sigs is a list of signatures, sorted by corresponding index.message PrivKeyEd25519 {
type Multisignature struct {
	// CompactBitArray bitarray = 1 [(gogoproto.customname) = "BitArray"];
	Sigs [][]byte `protobuf:"bytes,2,rep,name=sigs,proto3" json:"sigs,omitempty"`
}

func (m *Multisignature) Reset()      { *m = Multisignature{} }
func (*Multisignature) ProtoMessage() {}
func (*Multisignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{4}
}
func (m *Multisignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Multisignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Multisignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Multisignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Multisignature.Merge(m, src)
}
func (m *Multisignature) XXX_Size() int {
	return m.Size()
}
func (m *Multisignature) XXX_DiscardUnknown() {
	xxx_messageInfo_Multisignature.DiscardUnknown(m)
}

var xxx_messageInfo_Multisignature proto.InternalMessageInfo

// PubKeyMultisigThreshold implements a K of N threshold multisig.
type PubKeyMultisigThreshold struct {
	K       uint64    `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty" yaml:"threshold"`
	PubKeys []*PubKey `protobuf:"bytes,2,rep,name=pubkeys,proto3" json:"pubkeys,omitempty" yaml:"threshold"`
}

func (m *PubKeyMultisigThreshold) Reset()      { *m = PubKeyMultisigThreshold{} }
func (*PubKeyMultisigThreshold) ProtoMessage() {}
func (*PubKeyMultisigThreshold) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{5}
}
func (m *PubKeyMultisigThreshold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeyMultisigThreshold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeyMultisigThreshold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeyMultisigThreshold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeyMultisigThreshold.Merge(m, src)
}
func (m *PubKeyMultisigThreshold) XXX_Size() int {
	return m.Size()
}
func (m *PubKeyMultisigThreshold) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeyMultisigThreshold.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeyMultisigThreshold proto.InternalMessageInfo

// PubKeySecp256k1 implements crypto.PubKey for the Secp256k1 signature scheme.
//
// It is the compressed form of the pubkey. The first byte depends is a 0x02 byte
// if the y-coordinate is the lexicographically largest of the two associated with
// the x-coordinate. Otherwise the first byte is a 0x03.
// This prefix is followed with the x-coordinate.
type PubKeySecp256K1 struct {
	bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *PubKeySecp256K1) Reset()      { *m = PubKeySecp256K1{} }
func (*PubKeySecp256K1) ProtoMessage() {}
func (*PubKeySecp256K1) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{6}
}
func (m *PubKeySecp256K1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeySecp256K1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeySecp256K1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeySecp256K1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeySecp256K1.Merge(m, src)
}
func (m *PubKeySecp256K1) XXX_Size() int {
	return m.Size()
}
func (m *PubKeySecp256K1) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeySecp256K1.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeySecp256K1 proto.InternalMessageInfo

// PrivKeySecp256k1 implements crypto.PrivKey for the Secp256k1 signature scheme.
type PrivKeySecp256K1 struct {
	bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *PrivKeySecp256K1) Reset()      { *m = PrivKeySecp256K1{} }
func (*PrivKeySecp256K1) ProtoMessage() {}
func (*PrivKeySecp256K1) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{7}
}
func (m *PrivKeySecp256K1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivKeySecp256K1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivKeySecp256K1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivKeySecp256K1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivKeySecp256K1.Merge(m, src)
}
func (m *PrivKeySecp256K1) XXX_Size() int {
	return m.Size()
}
func (m *PrivKeySecp256K1) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivKeySecp256K1.DiscardUnknown(m)
}

var xxx_messageInfo_PrivKeySecp256K1 proto.InternalMessageInfo

// PubKeySr25519 implements crypto.PubKey for the Sr25519 signature scheme.
type PubKeySr25519 struct {
	bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *PubKeySr25519) Reset()      { *m = PubKeySr25519{} }
func (*PubKeySr25519) ProtoMessage() {}
func (*PubKeySr25519) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{8}
}
func (m *PubKeySr25519) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeySr25519) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeySr25519.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeySr25519) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeySr25519.Merge(m, src)
}
func (m *PubKeySr25519) XXX_Size() int {
	return m.Size()
}
func (m *PubKeySr25519) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeySr25519.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeySr25519 proto.InternalMessageInfo

// PrivKeySr25519 implements crypto.PrivKey for the Sr25519 signature scheme.
type PrivKeySr25519 struct {
	bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *PrivKeySr25519) Reset()      { *m = PrivKeySr25519{} }
func (*PrivKeySr25519) ProtoMessage() {}
func (*PrivKeySr25519) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{9}
}
func (m *PrivKeySr25519) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivKeySr25519) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivKeySr25519.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivKeySr25519) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivKeySr25519.Merge(m, src)
}
func (m *PrivKeySr25519) XXX_Size() int {
	return m.Size()
}
func (m *PrivKeySr25519) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivKeySr25519.DiscardUnknown(m)
}

var xxx_messageInfo_PrivKeySr25519 proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cosmos_sdk.crypto.keys.v1.Curve", Curve_name, Curve_value)
	proto.RegisterType((*PubKey)(nil), "cosmos_sdk.crypto.keys.v1.PubKey")
	proto.RegisterType((*PrivKey)(nil), "cosmos_sdk.crypto.keys.v1.PrivKey")
	proto.RegisterType((*PubKeyEd25519)(nil), "cosmos_sdk.crypto.keys.v1.PubKeyEd25519")
	proto.RegisterType((*PrivKeyEd25519)(nil), "cosmos_sdk.crypto.keys.v1.PrivKeyEd25519")
	proto.RegisterType((*Multisignature)(nil), "cosmos_sdk.crypto.keys.v1.Multisignature")
	proto.RegisterType((*PubKeyMultisigThreshold)(nil), "cosmos_sdk.crypto.keys.v1.PubKeyMultisigThreshold")
	proto.RegisterType((*PubKeySecp256K1)(nil), "cosmos_sdk.crypto.keys.v1.PubKeySecp256k1")
	proto.RegisterType((*PrivKeySecp256K1)(nil), "cosmos_sdk.crypto.keys.v1.PrivKeySecp256k1")
	proto.RegisterType((*PubKeySr25519)(nil), "cosmos_sdk.crypto.keys.v1.PubKeySr25519")
	proto.RegisterType((*PrivKeySr25519)(nil), "cosmos_sdk.crypto.keys.v1.PrivKeySr25519")
}

func init() { proto.RegisterFile("crypto/keys/types.proto", fileDescriptor_f52e55e29197ca1e) }

var fileDescriptor_f52e55e29197ca1e = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x3d, 0x6f, 0xda, 0x40,
	0x1c, 0xc6, 0x6d, 0x08, 0x41, 0x1c, 0x79, 0x41, 0xb7, 0x84, 0x64, 0xb0, 0x53, 0xab, 0xaa, 0x28,
	0x51, 0xec, 0xe0, 0x88, 0xa4, 0xcd, 0x56, 0xc0, 0x55, 0x52, 0xd4, 0x08, 0x99, 0x76, 0xa9, 0x2a,
	0x45, 0x80, 0x4f, 0x60, 0xf1, 0x62, 0xeb, 0xee, 0x8c, 0xe4, 0x6f, 0xd1, 0x8f, 0x90, 0xa5, 0x7b,
	0x87, 0x7e, 0x88, 0xa8, 0x13, 0x63, 0x26, 0x54, 0xcc, 0xd2, 0xb9, 0x9f, 0xa0, 0xc2, 0x87, 0x81,
	0x10, 0x52, 0x93, 0x89, 0x33, 0xf7, 0x3c, 0x8f, 0x1f, 0xfd, 0xee, 0xef, 0x03, 0x7b, 0x0d, 0xec,
	0xda, 0xd4, 0x52, 0xda, 0xc8, 0x25, 0x0a, 0x75, 0x6d, 0x44, 0x64, 0x1b, 0x5b, 0xd4, 0x82, 0xfb,
	0x0d, 0x8b, 0x74, 0x2d, 0x72, 0x43, 0x8c, 0xb6, 0xcc, 0x34, 0xf2, 0x44, 0x23, 0xf7, 0x73, 0x07,
	0x47, 0xb4, 0x65, 0x62, 0xe3, 0xc6, 0xae, 0x61, 0xea, 0x2a, 0xbe, 0x5a, 0x61, 0xe2, 0xe3, 0xc5,
	0x07, 0x96, 0x73, 0xf0, 0xea, 0xb1, 0xb8, 0x69, 0x35, 0xad, 0xf9, 0x8a, 0xe9, 0xa4, 0xdb, 0x08,
	0xd8, 0xac, 0x38, 0xf5, 0x32, 0x72, 0x61, 0x09, 0xc4, 0x91, 0xa1, 0xe6, 0xf3, 0xb9, 0xb7, 0x69,
	0xfe, 0x90, 0xcf, 0x24, 0xd5, 0x8c, 0xfc, 0x64, 0x19, 0x99, 0x79, 0x34, 0xa6, 0xbf, 0xe4, 0xf4,
	0xc0, 0x0a, 0x3f, 0x80, 0x04, 0x41, 0x0d, 0x5b, 0xcd, 0x9f, 0xb5, 0x73, 0xe9, 0x88, 0x9f, 0x93,
	0x0d, 0xcd, 0xa9, 0x06, 0x8e, 0x4b, 0x4e, 0x9f, 0xdb, 0x27, 0x8d, 0x08, 0x66, 0x8d, 0xa2, 0x6b,
	0x36, 0xaa, 0xe2, 0x59, 0xa3, 0xa9, 0xf5, 0xe2, 0xfc, 0xcf, 0xad, 0xc8, 0xfd, 0xfa, 0x79, 0xac,
	0x64, 0x9b, 0x26, 0x6d, 0x39, 0x75, 0xb9, 0x61, 0x75, 0x15, 0x8a, 0x7a, 0x06, 0xc2, 0x5d, 0xb3,
	0x47, 0x17, 0x97, 0xd3, 0x48, 0x16, 0x55, 0x88, 0x81, 0x28, 0x71, 0xba, 0xd2, 0xf7, 0x08, 0x88,
	0x57, 0xb0, 0xd9, 0x9f, 0x30, 0xd2, 0x96, 0x19, 0xbd, 0xfe, 0x5f, 0x23, 0x66, 0x5a, 0x01, 0xa9,
	0xfc, 0x18, 0xd2, 0x51, 0x78, 0xd0, 0x13, 0x94, 0xb4, 0x65, 0x4a, 0x6b, 0x74, 0x5a, 0x81, 0xe9,
	0xcd, 0x14, 0xd3, 0xc9, 0xfa, 0x98, 0x58, 0x56, 0xc0, 0xe9, 0x04, 0x6c, 0x3f, 0x98, 0x0a, 0x28,
	0x82, 0x58, 0xdd, 0xa5, 0x88, 0xf8, 0xa8, 0xb6, 0x0a, 0x09, 0x6f, 0x28, 0xb2, 0x3f, 0x74, 0xf6,
	0x23, 0xe5, 0xc0, 0xce, 0x43, 0x46, 0xe1, 0x96, 0x97, 0x60, 0xe7, 0xa3, 0xd3, 0xa1, 0x26, 0x31,
	0x9b, 0xbd, 0x1a, 0x75, 0x30, 0x82, 0x10, 0x6c, 0x10, 0xb3, 0x49, 0xd2, 0x91, 0xc3, 0x68, 0x66,
	0x4b, 0xf7, 0xd7, 0xd2, 0x0f, 0x1e, 0xec, 0xb1, 0x2e, 0x81, 0xf8, 0x53, 0x0b, 0x23, 0xd2, 0xb2,
	0x3a, 0x06, 0x3c, 0x07, 0x09, 0x1a, 0x3c, 0xf8, 0xaf, 0xd9, 0x28, 0xec, 0x7b, 0x43, 0x91, 0x2f,
	0xff, 0x1d, 0x8a, 0x29, 0xb7, 0xd6, 0xed, 0x5c, 0x48, 0xb3, 0x7d, 0x49, 0x9f, 0x6b, 0xe1, 0x57,
	0x10, 0xb7, 0x9d, 0xfa, 0x04, 0xa4, 0xff, 0xae, 0xa4, 0xfa, 0x22, 0x74, 0x1a, 0x0b, 0xa2, 0x37,
	0x14, 0xe3, 0x6c, 0x4d, 0x56, 0xe6, 0x07, 0x91, 0x92, 0x0a, 0x76, 0x97, 0xbe, 0x85, 0x70, 0x18,
	0xa7, 0x20, 0xb5, 0x3c, 0x1a, 0xe1, 0xa6, 0xd9, 0x31, 0x4d, 0x67, 0xe0, 0x39, 0xc7, 0xb4, 0xae,
	0x25, 0xfb, 0x0e, 0xc4, 0x8a, 0x0e, 0xee, 0x23, 0xb8, 0x0b, 0x92, 0x9f, 0xaf, 0xab, 0x15, 0xad,
	0x78, 0xf5, 0xfe, 0x4a, 0x2b, 0xa5, 0x38, 0x98, 0x04, 0x71, 0xad, 0xe4, 0xa7, 0xa4, 0x78, 0xb8,
	0x0d, 0x12, 0x55, 0xad, 0x58, 0x51, 0xf3, 0x67, 0xe5, 0x5c, 0x2a, 0x32, 0xd9, 0xab, 0xea, 0x6c,
	0x2f, 0x5a, 0xb8, 0xbe, 0x1b, 0x09, 0xdc, 0x60, 0x24, 0x70, 0xf7, 0x23, 0x81, 0xbb, 0xf3, 0x04,
	0x7e, 0xe0, 0x09, 0xfc, 0x6f, 0x4f, 0xe0, 0xbf, 0x8d, 0x05, 0x6e, 0x30, 0x16, 0xb8, 0xfb, 0xb1,
	0xc0, 0x7d, 0xc9, 0x2c, 0x0c, 0x2b, 0x3b, 0x8d, 0xe0, 0x52, 0x24, 0x46, 0x5b, 0x59, 0xb8, 0x65,
	0xeb, 0x9b, 0xfe, 0x85, 0x77, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x21, 0x32, 0x7f, 0x1f, 0x7b,
	0x05, 0x00, 0x00,
}

func (this *PubKey) GetPubKey() github_com_tendermint_tendermint_crypto.PubKey {
	if x := this.GetEd25519(); x != nil {
		return x
	}
	if x := this.GetSecp256K1(); x != nil {
		return x
	}
	if x := this.GetSr25519(); x != nil {
		return x
	}
	return nil
}

func (this *PubKey) SetPubKey(value github_com_tendermint_tendermint_crypto.PubKey) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *PubKeyEd25519:
		this.Sum = &PubKey_Ed25519{vt}
		return nil
	case *PubKeySecp256K1:
		this.Sum = &PubKey_Secp256K1{vt}
		return nil
	case *PubKeySr25519:
		this.Sum = &PubKey_Sr25519{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message PubKey", value)
}

func (this *PrivKey) GetPrivKey() github_com_tendermint_tendermint_crypto.PrivKey {
	if x := this.GetEd25519(); x != nil {
		return x
	}
	if x := this.GetSecp256K1(); x != nil {
		return x
	}
	if x := this.GetSr25519(); x != nil {
		return x
	}
	return nil
}

func (this *PrivKey) SetPrivKey(value github_com_tendermint_tendermint_crypto.PrivKey) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *PrivKeyEd25519:
		this.Sum = &PrivKey_Ed25519{vt}
		return nil
	case *PrivKeySecp256K1:
		this.Sum = &PrivKey_Secp256K1{vt}
		return nil
	case *PrivKeySr25519:
		this.Sum = &PrivKey_Sr25519{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message PrivKey", value)
}

func (m *PubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PubKey_Ed25519) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKey_Ed25519) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ed25519 != nil {
		{
			size, err := m.Ed25519.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PubKey_Secp256K1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKey_Secp256K1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Secp256K1 != nil {
		{
			size, err := m.Secp256K1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PubKey_Sr25519) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKey_Sr25519) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sr25519 != nil {
		{
			size, err := m.Sr25519.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PrivKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrivKey_Ed25519) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivKey_Ed25519) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ed25519 != nil {
		{
			size, err := m.Ed25519.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PrivKey_Secp256K1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivKey_Secp256K1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Secp256K1 != nil {
		{
			size, err := m.Secp256K1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PrivKey_Sr25519) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivKey_Sr25519) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sr25519 != nil {
		{
			size, err := m.Sr25519.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PubKeyEd25519) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeyEd25519) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKeyEd25519) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.bytes) > 0 {
		i -= len(m.bytes)
		copy(dAtA[i:], m.bytes)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.bytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivKeyEd25519) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivKeyEd25519) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivKeyEd25519) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.bytes) > 0 {
		i -= len(m.bytes)
		copy(dAtA[i:], m.bytes)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.bytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Multisignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Multisignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Multisignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sigs) > 0 {
		for iNdEx := len(m.Sigs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Sigs[iNdEx])
			copy(dAtA[i:], m.Sigs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Sigs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *PubKeyMultisigThreshold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeyMultisigThreshold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKeyMultisigThreshold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKeys) > 0 {
		for iNdEx := len(m.PubKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PubKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.K != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.K))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubKeySecp256K1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeySecp256K1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKeySecp256K1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.bytes) > 0 {
		i -= len(m.bytes)
		copy(dAtA[i:], m.bytes)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.bytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivKeySecp256K1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivKeySecp256K1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivKeySecp256K1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.bytes) > 0 {
		i -= len(m.bytes)
		copy(dAtA[i:], m.bytes)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.bytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubKeySr25519) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeySr25519) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKeySr25519) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.bytes) > 0 {
		i -= len(m.bytes)
		copy(dAtA[i:], m.bytes)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.bytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivKeySr25519) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivKeySr25519) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivKeySr25519) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.bytes) > 0 {
		i -= len(m.bytes)
		copy(dAtA[i:], m.bytes)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.bytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *PubKey_Ed25519) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ed25519 != nil {
		l = m.Ed25519.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PubKey_Secp256K1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Secp256K1 != nil {
		l = m.Secp256K1.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PubKey_Sr25519) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sr25519 != nil {
		l = m.Sr25519.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PrivKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *PrivKey_Ed25519) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ed25519 != nil {
		l = m.Ed25519.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PrivKey_Secp256K1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Secp256K1 != nil {
		l = m.Secp256K1.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PrivKey_Sr25519) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sr25519 != nil {
		l = m.Sr25519.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PubKeyEd25519) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.bytes)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PrivKeyEd25519) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.bytes)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Multisignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sigs) > 0 {
		for _, b := range m.Sigs {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PubKeyMultisigThreshold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K != 0 {
		n += 1 + sovTypes(uint64(m.K))
	}
	if len(m.PubKeys) > 0 {
		for _, e := range m.PubKeys {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PubKeySecp256K1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.bytes)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PrivKeySecp256K1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.bytes)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PubKeySr25519) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.bytes)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PrivKeySr25519) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.bytes)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ed25519", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PubKeyEd25519{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &PubKey_Ed25519{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secp256K1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PubKeySecp256K1{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &PubKey_Secp256K1{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sr25519", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PubKeySr25519{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &PubKey_Sr25519{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ed25519", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrivKeyEd25519{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &PrivKey_Ed25519{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secp256K1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrivKeySecp256K1{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &PrivKey_Secp256K1{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sr25519", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrivKeySr25519{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &PrivKey_Sr25519{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKeyEd25519) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeyEd25519: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeyEd25519: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.bytes = append(m.bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.bytes == nil {
				m.bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivKeyEd25519) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivKeyEd25519: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivKeyEd25519: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.bytes = append(m.bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.bytes == nil {
				m.bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Multisignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Multisignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Multisignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sigs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sigs = append(m.Sigs, make([]byte, postIndex-iNdEx))
			copy(m.Sigs[len(m.Sigs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKeyMultisigThreshold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeyMultisigThreshold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeyMultisigThreshold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			m.K = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.K |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeys = append(m.PubKeys, &PubKey{})
			if err := m.PubKeys[len(m.PubKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKeySecp256K1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeySecp256k1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeySecp256k1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.bytes = append(m.bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.bytes == nil {
				m.bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivKeySecp256K1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivKeySecp256k1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivKeySecp256k1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.bytes = append(m.bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.bytes == nil {
				m.bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKeySr25519) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeySr25519: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeySr25519: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.bytes = append(m.bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.bytes == nil {
				m.bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivKeySr25519) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivKeySr25519: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivKeySr25519: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.bytes = append(m.bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.bytes == nil {
				m.bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
