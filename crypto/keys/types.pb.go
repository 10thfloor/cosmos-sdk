// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crypto/keys/types.proto

package keys

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Curve defines the key curve types that are available for key generation.
type Curve int32

const (
	// Unspecified curve. Returns error on key generation.
	UNSPECIFIED Curve = 0
	// Ed25519 curve
	ED25519 Curve = 1
	// Secp256k1 curve
	SECP256K1 Curve = 2
	// Sr25519 curve
	SR25519 Curve = 3
)

var Curve_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "ED25519",
	2: "SECP256K1",
	3: "SR25519",
}

var Curve_value = map[string]int32{
	"UNSPECIFIED": 0,
	"ED25519":     1,
	"SECP256K1":   2,
	"SR25519":     3,
}

func (x Curve) String() string {
	return proto.EnumName(Curve_name, int32(x))
}

func (Curve) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{0}
}

// CompactBitArray is an implementation of a space efficient bit array.
// This is used to ensure that the encoded data takes up a minimal amount of
// space after amino encoding.
// This is not thread safe, and is not intended for concurrent usage.
type CompactBitArray struct {
	ExtraBitsStored []byte `protobuf:"bytes,1,opt,name=extra_bits,json=extraBits,proto3" json:"extra_bits,omitempty" yaml:"extra_bits"`
	Elems           []byte `protobuf:"bytes,2,opt,name=bits,proto3" json:"bits,omitempty" yaml:"bits"`
}

func (m *CompactBitArray) Reset()      { *m = CompactBitArray{} }
func (*CompactBitArray) ProtoMessage() {}
func (*CompactBitArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{0}
}
func (m *CompactBitArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactBitArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactBitArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactBitArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactBitArray.Merge(m, src)
}
func (m *CompactBitArray) XXX_Size() int {
	return m.Size()
}
func (m *CompactBitArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactBitArray.DiscardUnknown(m)
}

var xxx_messageInfo_CompactBitArray proto.InternalMessageInfo

// Multisignature is used to represent the signature object used in the multisigs.
// Sigs is a list of signatures, sorted by corresponding index.message PrivKeyEd25519 {
type Multisignature struct {
	BitArray *CompactBitArray `protobuf:"bytes,1,opt,name=bitarray,proto3" json:"bitarray,omitempty"`
	Sigs     [][]byte         `protobuf:"bytes,2,rep,name=sigs,proto3" json:"sigs,omitempty"`
}

func (m *Multisignature) Reset()         { *m = Multisignature{} }
func (m *Multisignature) String() string { return proto.CompactTextString(m) }
func (*Multisignature) ProtoMessage()    {}
func (*Multisignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52e55e29197ca1e, []int{1}
}
func (m *Multisignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Multisignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Multisignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Multisignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Multisignature.Merge(m, src)
}
func (m *Multisignature) XXX_Size() int {
	return m.Size()
}
func (m *Multisignature) XXX_DiscardUnknown() {
	xxx_messageInfo_Multisignature.DiscardUnknown(m)
}

var xxx_messageInfo_Multisignature proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cosmos_sdk.crypto.keys.v1.Curve", Curve_name, Curve_value)
	proto.RegisterType((*CompactBitArray)(nil), "cosmos_sdk.crypto.keys.v1.CompactBitArray")
	proto.RegisterType((*Multisignature)(nil), "cosmos_sdk.crypto.keys.v1.Multisignature")
}

func init() { proto.RegisterFile("crypto/keys/types.proto", fileDescriptor_f52e55e29197ca1e) }

var fileDescriptor_f52e55e29197ca1e = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x77, 0x39, 0xb8, 0x5b, 0x07, 0x12, 0xb6, 0xe1, 0xa0, 0x58, 0x23, 0x17, 0xc8,
	0x3a, 0x81, 0xad, 0x04, 0x05, 0x89, 0xeb, 0xce, 0x3e, 0x83, 0x4e, 0x88, 0x53, 0x64, 0x43, 0x43,
	0x13, 0xf9, 0xcf, 0xca, 0x59, 0x25, 0x66, 0xad, 0xdd, 0x75, 0x84, 0x3b, 0x4a, 0x4a, 0x4a, 0x4a,
	0x1e, 0x27, 0x65, 0xca, 0x54, 0x16, 0x71, 0xde, 0x20, 0x4f, 0x80, 0x6c, 0x13, 0x82, 0x90, 0xa8,
	0x76, 0x76, 0xe6, 0x37, 0x9f, 0xbe, 0x4f, 0x03, 0x1f, 0x46, 0xbc, 0xc8, 0x24, 0xb3, 0x66, 0xa4,
	0x10, 0x96, 0x2c, 0x32, 0x22, 0xcc, 0x8c, 0x33, 0xc9, 0xd0, 0xa3, 0x88, 0x89, 0x94, 0x89, 0x89,
	0x88, 0x67, 0x66, 0xcb, 0x98, 0x35, 0x63, 0x2e, 0x06, 0x8f, 0x9f, 0xca, 0x29, 0xe5, 0xf1, 0x24,
	0x0b, 0xb8, 0x2c, 0xac, 0x86, 0xb6, 0x12, 0x96, 0xb0, 0x43, 0xd5, 0x4a, 0xe8, 0x5f, 0x01, 0xec,
	0x39, 0x2c, 0xcd, 0x82, 0x48, 0xda, 0x54, 0x5e, 0x71, 0x1e, 0x14, 0xe8, 0x0d, 0x84, 0xe4, 0xb3,
	0xe4, 0xc1, 0x24, 0xa4, 0x52, 0x9c, 0x83, 0x27, 0xc0, 0xe8, 0xda, 0x46, 0x55, 0x6a, 0x3d, 0xb7,
	0xee, 0xda, 0x54, 0x0a, 0x5f, 0x32, 0x4e, 0xe2, 0x5d, 0xa9, 0x3d, 0x28, 0x82, 0x74, 0x7e, 0xa9,
	0x1f, 0x70, 0xdd, 0x3b, 0x23, 0x7b, 0x0a, 0x3d, 0x83, 0x9d, 0x46, 0xe2, 0xa8, 0x91, 0x38, 0xaf,
	0x4a, 0xed, 0xc4, 0x9d, 0x93, 0x54, 0xec, 0x4a, 0x4d, 0x6d, 0x17, 0xdb, 0x95, 0x86, 0xd2, 0xbf,
	0x00, 0x78, 0xff, 0x5d, 0x3e, 0x97, 0x54, 0xd0, 0xe4, 0x53, 0x20, 0x73, 0x4e, 0xd0, 0x7b, 0x78,
	0x1a, 0x52, 0x19, 0xd4, 0xae, 0x1a, 0x1f, 0xea, 0xf0, 0xc2, 0xfc, 0x6f, 0x66, 0xf3, 0x9f, 0x1c,
	0x76, 0xb7, 0x2a, 0xb5, 0xd3, 0xfd, 0xcf, 0xfb, 0xa3, 0x84, 0x10, 0xec, 0x08, 0x9a, 0xd4, 0xb6,
	0x8e, 0x8d, 0xae, 0xd7, 0xd4, 0x97, 0x9d, 0xef, 0x3f, 0x34, 0x70, 0x71, 0x05, 0x4f, 0x9c, 0x9c,
	0x2f, 0x08, 0xea, 0x41, 0xf5, 0xc3, 0xad, 0x3f, 0x76, 0x9d, 0x9b, 0xd7, 0x37, 0xee, 0x75, 0x5f,
	0x41, 0x2a, 0xbc, 0xeb, 0x5e, 0x0f, 0x47, 0xa3, 0xc1, 0xab, 0x3e, 0x40, 0xf7, 0xe0, 0x99, 0xef,
	0x3a, 0xe3, 0xe1, 0xe8, 0xe5, 0xdb, 0x41, 0xff, 0xa8, 0x9e, 0xf9, 0x5e, 0x3b, 0x3b, 0xb6, 0x6f,
	0x97, 0x1b, 0xac, 0xac, 0x36, 0x58, 0x59, 0x6f, 0xb0, 0xb2, 0xac, 0x30, 0x58, 0x55, 0x18, 0xfc,
	0xac, 0x30, 0xf8, 0xb6, 0xc5, 0xca, 0x6a, 0x8b, 0x95, 0xf5, 0x16, 0x2b, 0x1f, 0x8d, 0x84, 0xca,
	0x69, 0x1e, 0x9a, 0x11, 0x4b, 0xad, 0x36, 0xd0, 0xef, 0xe7, 0xb9, 0x88, 0x67, 0xd6, 0x5f, 0xf7,
	0x0e, 0xef, 0x34, 0x77, 0x7a, 0xf1, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x39, 0xee, 0x59, 0x65, 0x05,
	0x02, 0x00, 0x00,
}

func (m *CompactBitArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactBitArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactBitArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Elems) > 0 {
		i -= len(m.Elems)
		copy(dAtA[i:], m.Elems)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Elems)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExtraBitsStored) > 0 {
		i -= len(m.ExtraBitsStored)
		copy(dAtA[i:], m.ExtraBitsStored)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtraBitsStored)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Multisignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Multisignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Multisignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sigs) > 0 {
		for iNdEx := len(m.Sigs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Sigs[iNdEx])
			copy(dAtA[i:], m.Sigs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Sigs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BitArray != nil {
		{
			size, err := m.BitArray.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CompactBitArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtraBitsStored)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Elems)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Multisignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BitArray != nil {
		l = m.BitArray.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Sigs) > 0 {
		for _, b := range m.Sigs {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CompactBitArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactBitArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactBitArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraBitsStored", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraBitsStored = append(m.ExtraBitsStored[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraBitsStored == nil {
				m.ExtraBitsStored = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elems", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elems = append(m.Elems[:0], dAtA[iNdEx:postIndex]...)
			if m.Elems == nil {
				m.Elems = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Multisignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Multisignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Multisignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BitArray == nil {
				m.BitArray = &CompactBitArray{}
			}
			if err := m.BitArray.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sigs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sigs = append(m.Sigs, make([]byte, postIndex-iNdEx))
			copy(m.Sigs[len(m.Sigs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
